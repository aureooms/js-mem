"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.heap = heap;


/**
 * /!\ INCOMPLETE
 * Heap manager backed by a buffer.
 */

function heap(Buffer) {

	/**
  * The *s* prefix in members and methods stands for size.
  * The *a* prefix in members and methods stands for address.
  */

	var Heap = function Heap(n) {
		this.buffer = new Buffer(n);
		this.n = 1;
		this.slo = 0;
		this.shi = 1;
		this.alo = 0;
		this.ahi = 1;
		this.size = new Uint32Array(1);
		this.addr = new Uint32Array(1);
		this.smap = new Uint32Array(1);
		this.amap = new Uint32Array(1);
		this.size[0] = n;
		this.addr[0] = 0;
		this.smap[0] = 0;
		this.amap[0] = 0;
	};

	Heap.prototype.alloc = function (n) {

		var i, j;

		i = this.ssearch(n, this.slo, this.shi);
		this.size[i] -= n;
		this.addr[i] += n;
		j = this.ssearch(n, this.slo, i);
		this.smove(i, j);
		return i;
	};

	Heap.prototype.smove = function (i, j) {
		var tmp, m, n, k;
		n = i - j;
		m = this.shi - this.slo - n;

		if (this.slo > 0 && m < n) {
			--this.slo;
			for (k = this.slo; k < j; ++k) {
				this.size[k] = this.size[k + 1];
				this.smap[k] = this.smap[k + 1];
			}
			this.size[j] = this.size[i];
			this.smap[j] = this.smap[i];
			for (k = i; k < this.shi; ++k) {
				this.size[k] = this.size[k + 1];
				this.smap[k] = this.smap[k + 1];
			}
			--this.shi;
		} else {
			tmp = this.size[i];
			for (k = i; k > j; --k) {
				this.size[k] = this.size[k - 1];
			}
			this.size[j] = tmp;

			tmp = this.smap[i];
			for (k = i; k > j; --k) {
				this.smap[k] = this.smap[k - 1];
			}
			this.smap[j] = tmp;
		}

		this.amap[this.smap[j]] = j;
	};

	Heap.prototype.free = function (i, n) {
		var j, k, tmp, joinleft, joinright;
		j = this.asearch(i, this.alo, this.ahi);

		joinleft = this.addr[j - 1] + this.size[this.amap[j - 1]] === i;
		joinright = i + n === this.addr[j];

		if (joinleft ^ joinright) {
			if (joinleft) {
				this.size[this.amap[j - 1]] += n;
			} else {
				this.addr[j] -= n;
			}
		} else {
			if (joinleft) {
				this.addr[j - 1] = this.addr[j - 1];
				this.size[y] = n + this.size[j - 1] + this.size[j];
				this.smap[y] = j - 1;
				this.amap[j - 1] = y;
			} else {
				this.addr[j] = i;
				this.size[y] = n;
				this.smap[y] = j;
				this.amap[j] = y;
			}
		}

		for (k = this.ahi; k > j; --k) {
			this.addr[k] = this.addr[k - 1];
			this.amap[k] = this.amap[k - 1];
		}
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWFwLmpzIl0sIm5hbWVzIjpbImhlYXAiLCJCdWZmZXIiLCJIZWFwIiwibiIsImJ1ZmZlciIsInNsbyIsInNoaSIsImFsbyIsImFoaSIsInNpemUiLCJVaW50MzJBcnJheSIsImFkZHIiLCJzbWFwIiwiYW1hcCIsInByb3RvdHlwZSIsImFsbG9jIiwiaSIsImoiLCJzc2VhcmNoIiwic21vdmUiLCJ0bXAiLCJtIiwiayIsImZyZWUiLCJqb2lubGVmdCIsImpvaW5yaWdodCIsImFzZWFyY2giLCJ5Il0sIm1hcHBpbmdzIjoiOzs7OztRQU9nQkEsSSxHQUFBQSxJOzs7QUFMaEI7Ozs7O0FBS08sU0FBU0EsSUFBVCxDQUFnQkMsTUFBaEIsRUFBeUI7O0FBRS9COzs7OztBQUtBLEtBQUlDLE9BQU8sU0FBUEEsSUFBTyxDQUFXQyxDQUFYLEVBQWU7QUFDekIsT0FBS0MsTUFBTCxHQUFjLElBQUlILE1BQUosQ0FBWUUsQ0FBWixDQUFkO0FBQ0EsT0FBS0EsQ0FBTCxHQUFTLENBQVQ7QUFDQSxPQUFLRSxHQUFMLEdBQVcsQ0FBWDtBQUNBLE9BQUtDLEdBQUwsR0FBVyxDQUFYO0FBQ0EsT0FBS0MsR0FBTCxHQUFXLENBQVg7QUFDQSxPQUFLQyxHQUFMLEdBQVcsQ0FBWDtBQUNBLE9BQUtDLElBQUwsR0FBWSxJQUFJQyxXQUFKLENBQWlCLENBQWpCLENBQVo7QUFDQSxPQUFLQyxJQUFMLEdBQVksSUFBSUQsV0FBSixDQUFpQixDQUFqQixDQUFaO0FBQ0EsT0FBS0UsSUFBTCxHQUFZLElBQUlGLFdBQUosQ0FBaUIsQ0FBakIsQ0FBWjtBQUNBLE9BQUtHLElBQUwsR0FBWSxJQUFJSCxXQUFKLENBQWlCLENBQWpCLENBQVo7QUFDQSxPQUFLRCxJQUFMLENBQVUsQ0FBVixJQUFlTixDQUFmO0FBQ0EsT0FBS1EsSUFBTCxDQUFVLENBQVYsSUFBZSxDQUFmO0FBQ0EsT0FBS0MsSUFBTCxDQUFVLENBQVYsSUFBZSxDQUFmO0FBQ0EsT0FBS0MsSUFBTCxDQUFVLENB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QUFlVixDQUFmO0FBQ0EsU0FBS0osSUFBTCxDQUFVSSxDQUFWLElBQWVVLENBQWY7QUFDQTtBQUNEOztBQUVELE9BQUtMLElBQUksS0FBS2QsR0FBZCxFQUFtQmMsSUFBSUwsQ0FBdkIsRUFBMEIsRUFBRUssQ0FBNUIsRUFBK0I7QUFDOUIsUUFBS1gsSUFBTCxDQUFVVyxDQUFWLElBQWUsS0FBS1gsSUFBTCxDQUFVVyxJQUFFLENBQVosQ0FBZjtBQUNBLFFBQUtULElBQUwsQ0FBVVMsQ0FBVixJQUFlLEtBQUtULElBQUwsQ0FBVVMsSUFBRSxDQUFaLENBQWY7QUFDQTtBQUdELEVBcENEO0FBc0NBIiwiZmlsZSI6ImhlYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuLyoqXG4gKiAvIVxcIElOQ09NUExFVEVcbiAqIEhlYXAgbWFuYWdlciBiYWNrZWQgYnkgYSBidWZmZXIuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhlYXAgKCBCdWZmZXIgKSB7XG5cblx0LyoqXG5cdCAqIFRoZSAqcyogcHJlZml4IGluIG1lbWJlcnMgYW5kIG1ldGhvZHMgc3RhbmRzIGZvciBzaXplLlxuXHQgKiBUaGUgKmEqIHByZWZpeCBpbiBtZW1iZXJzIGFuZCBtZXRob2RzIHN0YW5kcyBmb3IgYWRkcmVzcy5cblx0ICovXG5cblx0dmFyIEhlYXAgPSBmdW5jdGlvbiAoIG4gKSB7XG5cdFx0dGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyKCBuICkgO1xuXHRcdHRoaXMubiA9IDEgO1xuXHRcdHRoaXMuc2xvID0gMCA7XG5cdFx0dGhpcy5zaGkgPSAxIDtcblx0XHR0aGlzLmFsbyA9IDAgO1xuXHRcdHRoaXMuYWhpID0gMSA7XG5cdFx0dGhpcy5zaXplID0gbmV3IFVpbnQzMkFycmF5KCAxICkgO1xuXHRcdHRoaXMuYWRkciA9IG5ldyBVaW50MzJBcnJheSggMSApIDtcblx0XHR0aGlzLnNtYXAgPSBuZXcgVWludDMyQXJyYXkoIDEgKSA7XG5cdFx0dGhpcy5hbWFwID0gbmV3IFVpbnQzMkFycmF5KCAxICkgO1xuXHRcdHRoaXMuc2l6ZVswXSA9IG4gO1xuXHRcdHRoaXMuYWRkclswXSA9IDAgO1xuXHRcdHRoaXMuc21hcFswXSA9IDAgO1xuXHRcdHRoaXMuYW1hcFswXSA9IDAgO1xuXHR9O1xuXG5cdEhlYXAucHJvdG90eXBlLmFsbG9jID0gZnVuY3Rpb24gKCBuICkge1xuXG5cdFx0dmFyIGkgLCBqIDtcblxuXHRcdGkgPSB0aGlzLnNzZWFyY2goIG4gLCB0aGlzLnNsbywgdGhpcy5zaGkpO1xuXHRcdHRoaXMuc2l6ZVtpXSAtPSBuO1xuXHRcdHRoaXMuYWRkcltpXSArPSBuO1xuXHRcdGogPSB0aGlzLnNzZWFyY2gobiwgdGhpcy5zbG8sIGkpO1xuXHRcdHRoaXMuc21vdmUoaSwgaik7XG5cdFx0cmV0dXJuIGk7XG5cdH07XG5cblx0SGVhcC5wcm90b3R5cGUuc21vdmUgPSBmdW5jdGlvbihpLCBqKSB7XG5cdFx0dmFyIHRtcCwgbSwgbiwgaztcblx0XHRuID0gaSAtIGo7XG5cdFx0bSA9IHRoaXMuc2hpIC0gdGhpcy5zbG8gLSBuO1xuXG5cdFx0aWYgKHRoaXMuc2xvID4gMCAmJiBtIDwgbikge1xuXHRcdFx0LS10aGlzLnNsbztcblx0XHRcdGZvciAoayA9IHRoaXMuc2xvOyBrIDwgajsgKytrKSB7XG5cdFx0XHRcdHRoaXMuc2l6ZVtrXSA9IHRoaXMuc2l6ZVtrKzFdO1xuXHRcdFx0XHR0aGlzLnNtYXBba10gPSB0aGlzLnNtYXBbaysxXTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2l6ZVtqXSA9IHRoaXMuc2l6ZVtpXTtcblx0XHRcdHRoaXMuc21hcFtqXSA9IHRoaXMuc21hcFtpXTtcblx0XHRcdGZvciAoayA9IGk7IGsgPCB0aGlzLnNoaTsgKytrKSB7XG5cdFx0XHRcdHRoaXMuc2l6ZVtrXSA9IHRoaXMuc2l6ZVtrKzFdO1xuXHRcdFx0XHR0aGlzLnNtYXBba10gPSB0aGlzLnNtYXBbaysxXTtcblx0XHRcdH1cblx0XHRcdC0tdGhpcy5zaGk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dG1wID0gdGhpcy5zaXplW2ldO1xuXHRcdFx0Zm9yIChrID0gaTsgayA+IGo7IC0taykge1xuXHRcdFx0XHR0aGlzLnNpemVba10gPSB0aGlzLnNpemVbay0xXTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc2l6ZVtqXSA9IHRtcDtcblxuXHRcdFx0dG1wID0gdGhpcy5zbWFwW2ldO1xuXHRcdFx0Zm9yIChrID0gaTsgayA+IGo7IC0taykge1xuXHRcdFx0XHR0aGlzLnNtYXBba10gPSB0aGlzLnNtYXBbay0xXTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc21hcFtqXSA9IHRtcDtcblx0XHR9XG5cblx0XHR0aGlzLmFtYXBbdGhpcy5zbWFwW2pdXSA9IGo7XG5cblx0fTtcblxuXG5cdEhlYXAucHJvdG90eXBlLmZyZWUgPSBmdW5jdGlvbihpLCBuKSB7XG5cdFx0dmFyIGosIGssIHRtcCwgam9pbmxlZnQsIGpvaW5yaWdodDtcblx0XHRqID0gdGhpcy5hc2VhcmNoKGksIHRoaXMuYWxvLCB0aGlzLmFoaSk7XG5cblx0XHRqb2lubGVmdCA9IHRoaXMuYWRkcltqLTFdICsgdGhpcy5zaXplW3RoaXMuYW1hcFtqLTFdXSA9PT0gaTtcblx0XHRqb2lucmlnaHQgPSBpICsgbiA9PT0gdGhpcy5hZGRyW2pdO1xuXG5cdFx0aWYgKGpvaW5sZWZ0IF4gam9pbnJpZ2h0KSB7XG5cdFx0XHRpZiAoam9pbmxlZnQpIHtcblx0XHRcdFx0dGhpcy5zaXplW3RoaXMuYW1hcFtqLTFdXSArPSBuO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYWRkcltqXSAtPSBuO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGlmIChqb2lubGVmdCkge1xuXHRcdFx0XHR0aGlzLmFkZHJbai0xXSA9IHRoaXMuYWRkcltqLTFdO1xuXHRcdFx0XHR0aGlzLnNpemVbeV0gPSBuICsgdGhpcy5zaXplW2otMV0gKyB0aGlzLnNpemVbal07XG5cdFx0XHRcdHRoaXMuc21hcFt5XSA9IGotMTtcblx0XHRcdFx0dGhpcy5hbWFwW2otMV0gPSB5O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdHRoaXMuYWRkcltqXSA9IGk7XG5cdFx0XHRcdHRoaXMuc2l6ZVt5XSA9IG47XG5cdFx0XHRcdHRoaXMuc21hcFt5XSA9IGo7XG5cdFx0XHRcdHRoaXMuYW1hcFtqXSA9IHk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChrID0gdGhpcy5haGk7IGsgPiBqOyAtLWspIHtcblx0XHRcdHRoaXMuYWRkcltrXSA9IHRoaXMuYWRkcltrLTFdO1xuXHRcdFx0dGhpcy5hbWFwW2tdID0gdGhpcy5hbWFwW2stMV07XG5cdFx0fVxuXG5cblx0fTtcblxufVxuIl19